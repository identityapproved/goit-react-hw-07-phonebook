{"version":3,"sources":["redux/contacts/contacts-selectors.js","Components/ContactsForm/ContactsForm.styled.js","services/api.js","redux/contacts/contacts-operations.js","Components/ContactsForm/ContactsForm.js","Components/ContactsListItem/ContactsListItem.styled.js","Components/ContactsListItem/ContactsListItem.js","Components/ContactsList/ContactsList.styled.js","Components/ContactsList/ContactsList.js","Components/Container/Container.styled.js","Components/Container/Container.js","Components/Filter/Filter.styled.js","redux/contacts/contacts-slice.js","Components/Filter/Filter.js","Components/App/App.js","redux/store.js","constants/theme.js","index.js"],"names":["getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","Form","styled","form","Label","label","props","theme","colors","primaryText","Input","input","FormBtn","button","secondaryText","black","axios","defaults","baseURL","fetchContactsApi","a","get","response","Error","addContactApi","newContact","post","deleteContactApi","id","delete","fetchContacts","createAsyncThunk","_","rejectWithValue","data","addContact","number","deleteContact","ContactsForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","onHandleChange","e","target","value","reset","onSubmit","preventDefault","find","contact","alert","type","pattern","title","onChange","required","disabled","ListItem","li","Item","span","DeleteBtn","ContactsListItem","remove","onClick","List","ul","ContactsList","useEffect","map","removeContact","SectionMain","section","SectionTitle","h2","Container","children","contactsSlice","createSlice","initialState","isLoading","error","reducers","changeFilter","payload","extraReducers","fulfilled","pending","rejected","actions","Filter","App","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","Object","freeze","white","green","red","blue","spacing","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.000535ba.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = createSelector([getContacts, getFilter], (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\n});\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Label = styled.label`\n  font-weight: 700;\n  color: ${props => props.theme.colors.primaryText};\n`;\n\nexport const Input = styled.input`\n  border-radius: 5px;\n  margin-left: 10px;\n`;\n\nexport const FormBtn = styled.button`\n  margin: 10px;\n  border: ${props => `1px solid ${props.theme.colors.secondaryText}`};\n  border-radius: 23px;\n  cursor: pointer;\n  padding: 12px 24px;\n  color: ${props => `${props.theme.colors.black}`};\n  transition: all 250ms ease-in;\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://61770e9a9c328300175f57bb.mockapi.io/api/v1/';\n\nexport const fetchContactsApi = async () => {\n  try {\n    const response = await axios.get('/contacts');\n    return response;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const addContactApi = async newContact => {\n  try {\n    const response = await axios.post('/contacts', newContact);\n    return response;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const deleteContactApi = async id => {\n  try {\n    const response = await axios.delete(`/contacts/${id}`);\n    return response;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchContactsApi, addContactApi, deleteContactApi } from '../../services/api';\n\nexport const fetchContacts = createAsyncThunk(\n  'contacts/fetchContacts',\n  async (_, { rejectWithValue }) => {\n    try {\n      const { data } = await fetchContactsApi();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n\nexport const addContact = createAsyncThunk(\n  'contacts/addContact',\n  async ({ name, number }, { rejectWithValue }) => {\n    try {\n      const newContact = { name, number };\n      const { data } = await addContactApi(newContact);\n      return data;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n\nexport const deleteContact = createAsyncThunk(\n  'contacts/deleteContact',\n  async (id, { rejectWithValue }) => {\n    try {\n      await deleteContactApi(id);\n      return id;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contacts-selectors';\nimport { Form, FormBtn, Input, Label } from './ContactsForm.styled';\nimport { addContact } from 'redux/contacts/contacts-operations';\n\nexport default function ContactsForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const onHandleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const onHandleSubmit = e => {\n    e.preventDefault();\n\n    const contactCheck = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (contactCheck) {\n      reset();\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={onHandleSubmit}>\n      <Label>\n        Name:\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          onChange={onHandleChange}\n          value={name}\n          required\n        />\n      </Label>\n      <Label>\n        Phone:\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер должен состоять цифр, и может содержать пробелы, тире, круглые скобки и может начинаться с +.\"\n          onChange={onHandleChange}\n          value={number}\n          required\n        />\n      </Label>\n      <FormBtn type=\"submit\" disabled={!name || !number}>\n        Add\n      </FormBtn>\n    </Form>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  padding: 5px;\n  /* border: ${props => `1px solid ${props.theme.colors.secondaryText}`}; */\n`;\n\nexport const Item = styled.span`\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.2;\n  color: ${props => `${props.theme.colors.primaryText}`};\n`;\n\nexport const DeleteBtn = styled.button`\n  margin: 10px;\n  border: 1px solid grey;\n  border-radius: 23px;\n  padding: 12px 24px;\n  color: ${props => `${props.theme.colors.black}`};\n  transition: all 250ms ease-in;\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n","import { DeleteBtn, Item, ListItem } from './ContactsListItem.styled';\nimport PropTypes from 'prop-types';\n\nexport const ContactsListItem = ({ name, number, remove }) => {\n  return (\n    <ListItem>\n      <Item>{name}</Item>\n      <Item>{number}</Item>\n      <DeleteBtn type=\"button\" onClick={remove}>\n        remove\n      </DeleteBtn>\n    </ListItem>\n  );\n};\n\nContactsListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  remove: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding: 0;\n  margin: 0;\n`;\n","import { ContactsListItem } from 'Components/ContactsListItem/ContactsListItem';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { List } from './ContactsList.styled';\nimport { getVisibleContacts } from 'redux/contacts/contacts-selectors';\nimport { fetchContacts, deleteContact } from '../../redux/contacts/contacts-operations';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const removeContact = id => dispatch(deleteContact(id));\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => (\n        <ContactsListItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          remove={() => removeContact(id)}\n        />\n      ))}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const SectionMain = styled.section`\n  margin: 0 auto;\n  align-items: center;\n  text-align: center;\n  padding: 10vh 0;\n  border: ${props => `1px solid ${props.theme.colors.secondaryText}`};\n`;\n\nexport const SectionTitle = styled.h2`\n  padding: 5px;\n  font-weight: 900;\n  font-size: 16px;\n  line-height: 1.36;\n  letter-spacing: 0.06em;\n  color: ${props => `${props.theme.colors.primaryText}`};\n  text-transform: uppercase;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionMain, SectionTitle } from './Container.styled';\n\nexport const Container = ({ children, title }) => {\n  return (\n    <SectionMain>\n      <SectionTitle>{title}</SectionTitle>\n      {children}\n    </SectionMain>\n  );\n};\n\nContainer.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  font-weight: 700;\n  color: ${props => props.theme.colors.primaryText};\n`;\n\nexport const Input = styled.input`\n  border-radius: 5px;\n  margin-left: 10px;\n`;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { fetchContacts, addContact, deleteContact } from './contacts-operations';\n\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: {\n    items: [],\n    filter: '',\n    isLoading: false,\n    error: null,\n  },\n  reducers: {\n    changeFilter: (state, { payload }) => {\n      state.filter = payload;\n    },\n  },\n  extraReducers: {\n    [fetchContacts.fulfilled]: (state, { payload }) => {\n      state.items = payload;\n      state.isLoading = null;\n      state.error = null;\n    },\n    [fetchContacts.pending]: state => {\n      state.isLoading = true;\n    },\n    [fetchContacts.rejected]: state => {\n      state.isLoading = null;\n      state.error = 'error';\n    },\n\n    [addContact.fulfilled]: (state, { payload }) => {\n      state.items = [payload, ...state.items];\n      state.isLoading = null;\n      state.error = null;\n    },\n    [addContact.pending]: state => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    [addContact.rejected]: state => {\n      state.isLoading = null;\n      state.error = 'error';\n    },\n\n    [deleteContact.fulfilled]: (state, { payload }) => {\n      state.items = state.items.filter(contact => contact.id !== payload);\n    },\n    [deleteContact.pending]: state => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    [deleteContact.rejected]: state => {\n      state.isLoading = null;\n      state.error = 'error';\n    },\n  },\n});\n\nexport const { changeFilter } = contactsSlice.actions;\n\nexport default contactsSlice.reducer;\n","import { Input, Label } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/contacts/contacts-selectors';\nimport { changeFilter } from 'redux/contacts/contacts-slice';\n\nexport const Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <Label>\n      Filter:\n      <Input type=\"text\" value={value} onChange={e => dispatch(changeFilter(e.target.value))} />\n    </Label>\n  );\n};\n","import ContactsForm from 'Components/ContactsForm/ContactsForm';\nimport { ContactsList } from 'Components/ContactsList/ContactsList';\nimport { Container } from 'Components/Container/Container';\nimport { Filter } from 'Components/Filter/Filter';\n\nexport const App = () => {\n  return (\n    <>\n      <Container title=\"Phonebook\">\n        <ContactsForm />\n      </Container>\n\n      <Container title=\"Contacts\">\n        <Filter />\n        <ContactsList />\n      </Container>\n    </>\n  );\n};\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-slice';\nimport logger from 'redux-logger';\nimport {\n  // persistStore,\n  // persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filter'],\n// };\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nexport const store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","export const theme = Object.freeze({\n  colors: {\n    white: '#ffffff',\n    black: '#010101',\n    green: '#4caf50',\n    red: '#f44336',\n    blue: '#2196f3',\n    primaryText: '#212121',\n    secondaryText: '#757575',\n  },\n  spacing: value => `${4 * value}px`,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './Components/App/App';\nimport { store } from './redux/store';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport { ThemeProvider } from '@emotion/react';\nimport { theme } from 'constants/theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}